
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::       (v1.5.10.RELEASE)

2018-03-15 00:08:11.652  INFO 48832 --- [           main] c.c.e.blogger.BloggerApplication         : Starting BloggerApplication on SSABAPAR-M-M34B with PID 48832 (/Users/ssabapar/eclipse/workspaces/trg/blogger/target/classes started by ssabapar in /Users/ssabapar/eclipse/workspaces/trg/blogger)
2018-03-15 00:08:11.657  INFO 48832 --- [           main] c.c.e.blogger.BloggerApplication         : No active profile set, falling back to default profiles: default
2018-03-15 00:08:11.702  INFO 48832 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@221a3fa4: startup date [Thu Mar 15 00:08:11 IST 2018]; root of context hierarchy
2018-03-15 00:08:12.614  INFO 48832 --- [           main] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2018-03-15 00:08:12.745  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$4a892bc3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.759  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.763  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@74aa9c72' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.770  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$6f5dce75] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.778  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.790  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b1db6389] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.886  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'security.oauth2.client-org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties' of type [org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.890  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration' of type [org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration$$EnhancerBySpringCGLIB$$69251f89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:12.909  INFO 48832 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'resourceServerProperties' of type [org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-03-15 00:08:13.261  INFO 48832 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8082 (http)
2018-03-15 00:08:13.273  INFO 48832 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2018-03-15 00:08:13.274  INFO 48832 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.27
2018-03-15 00:08:13.401  INFO 48832 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2018-03-15 00:08:13.401  INFO 48832 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1702 ms
2018-03-15 00:08:13.684  INFO 48832 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'characterEncodingFilter' to: [/*]
2018-03-15 00:08:13.685  INFO 48832 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2018-03-15 00:08:13.685  INFO 48832 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'httpPutFormContentFilter' to: [/*]
2018-03-15 00:08:13.685  INFO 48832 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'requestContextFilter' to: [/*]
2018-03-15 00:08:13.686  INFO 48832 --- [ost-startStop-1] .s.DelegatingFilterProxyRegistrationBean : Mapping filter: 'springSecurityFilterChain' to: [/*]
2018-03-15 00:08:13.686  INFO 48832 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'corsFilter' to: [/*]
2018-03-15 00:08:13.686  INFO 48832 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: 'dispatcherServlet' to [/]
2018-03-15 00:08:13.726  INFO 48832 --- [           main] o.s.j.d.DriverManagerDataSource          : Loaded JDBC driver: com.mysql.jdbc.Driver
2018-03-15 00:08:13.793  INFO 48832 --- [           main] j.LocalContainerEntityManagerFactoryBean : Building JPA container EntityManagerFactory for persistence unit 'default'
2018-03-15 00:08:13.804  INFO 48832 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2018-03-15 00:08:13.864  INFO 48832 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate Core {5.0.12.Final}
2018-03-15 00:08:13.866  INFO 48832 --- [           main] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2018-03-15 00:08:13.866  INFO 48832 --- [           main] org.hibernate.cfg.Environment            : HHH000021: Bytecode provider name : javassist
2018-03-15 00:08:13.901  INFO 48832 --- [           main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2018-03-15 00:08:14.186  INFO 48832 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2018-03-15 00:08:14.796  INFO 48832 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2018-03-15 00:08:15.323  WARN 48832 --- [           main] o.s.s.o.p.t.s.JwtAccessTokenConverter    : Unable to create an RSA verifier from verifierKey (ignoreable if using MAC)
2018-03-15 00:08:15.873  INFO 48832 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: mysql
	...]
2018-03-15 00:08:15.887  WARN 48832 --- [           main] org.hibernate.orm.connections            : HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2018-03-15 00:08:15.888  INFO 48832 --- [           main] org.hibernate.orm.connections            : HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/blogger?useSSL=true]
2018-03-15 00:08:15.888  INFO 48832 --- [           main] org.hibernate.orm.connections            : HHH10001001: Connection properties: {user=root, password=****}
2018-03-15 00:08:15.888  INFO 48832 --- [           main] org.hibernate.orm.connections            : HHH10001003: Autocommit mode: false
2018-03-15 00:08:15.890  INFO 48832 --- [           main] .c.i.DriverManagerConnectionProviderImpl : HHH000115: Hibernate connection pool size: 20 (min=1)
2018-03-15 00:08:15.898  INFO 48832 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect
2018-03-15 00:08:15.954  INFO 48832 --- [           main] org.hibernate.tool.hbm2ddl.SchemaUpdate  : HHH000228: Running hbm2ddl schema update
2018-03-15 00:08:16.229  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/authorize]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.authorize(java.util.Map<java.lang.String, java.lang.Object>,java.util.Map<java.lang.String, java.lang.String>,org.springframework.web.bind.support.SessionStatus,java.security.Principal)
2018-03-15 00:08:16.230  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/authorize],methods=[POST],params=[user_oauth_approval]}" onto public org.springframework.web.servlet.View org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.approveOrDeny(java.util.Map<java.lang.String, java.lang.String>,java.util.Map<java.lang.String, ?>,org.springframework.web.bind.support.SessionStatus,java.security.Principal)
2018-03-15 00:08:16.231  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/token],methods=[GET]}" onto public org.springframework.http.ResponseEntity<org.springframework.security.oauth2.common.OAuth2AccessToken> org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.getAccessToken(java.security.Principal,java.util.Map<java.lang.String, java.lang.String>) throws org.springframework.web.HttpRequestMethodNotSupportedException
2018-03-15 00:08:16.231  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/token],methods=[POST]}" onto public org.springframework.http.ResponseEntity<org.springframework.security.oauth2.common.OAuth2AccessToken> org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.postAccessToken(java.security.Principal,java.util.Map<java.lang.String, java.lang.String>) throws org.springframework.web.HttpRequestMethodNotSupportedException
2018-03-15 00:08:16.232  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/check_token]}" onto public java.util.Map<java.lang.String, ?> org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)
2018-03-15 00:08:16.232  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/confirm_access]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.getAccessConfirmation(java.util.Map<java.lang.String, java.lang.Object>,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2018-03-15 00:08:16.232  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/error]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint.handleError(javax.servlet.http.HttpServletRequest)
2018-03-15 00:08:16.235  INFO 48832 --- [           main] .s.o.p.e.FrameworkEndpointHandlerMapping : Mapped "{[/oauth/token_key],methods=[GET]}" onto public java.util.Map<java.lang.String, java.lang.String> org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint.getKey(java.security.Principal)
2018-03-15 00:08:18.082  INFO 48832 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: OrRequestMatcher [requestMatchers=[Ant [pattern='/oauth/token'], Ant [pattern='/oauth/token_key'], Ant [pattern='/oauth/check_token']]], [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@46fa2a7e, org.springframework.security.web.context.SecurityContextPersistenceFilter@10dbf660, org.springframework.security.web.header.HeaderWriterFilter@4910afdf, org.springframework.security.web.authentication.logout.LogoutFilter@6706da3d, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@68360fb9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@505a8582, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6f80cf5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3d02ff64, org.springframework.security.web.session.SessionManagementFilter@36a1fd20, org.springframework.security.web.access.ExceptionTranslationFilter@633a11eb, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@31dbf5bb]
2018-03-15 00:08:18.108  INFO 48832 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration$NotOAuthRequestMatcher@5d3f8661, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1df9f7c6, org.springframework.security.web.context.SecurityContextPersistenceFilter@190bf8e4, org.springframework.security.web.header.HeaderWriterFilter@3f6906f4, org.springframework.security.web.authentication.logout.LogoutFilter@5a06eeef, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@625f5712, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7a8b7e11, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@d229912, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4b5aa48b, org.springframework.security.web.session.SessionManagementFilter@1859e55c, org.springframework.security.web.access.ExceptionTranslationFilter@50d666a2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@51297528]
2018-03-15 00:08:18.110  INFO 48832 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: org.springframework.security.web.util.matcher.AnyRequestMatcher@1, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@19e8fe55, org.springframework.security.web.context.SecurityContextPersistenceFilter@72168258, org.springframework.security.web.header.HeaderWriterFilter@6bf54260, org.springframework.security.web.authentication.logout.LogoutFilter@5709e10b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@114badf0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4af84a76, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@b5ff70b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6d7bb5cc, org.springframework.security.web.session.SessionManagementFilter@7165bde6, org.springframework.security.web.access.ExceptionTranslationFilter@13d5606c]
2018-03-15 00:08:18.640  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@221a3fa4: startup date [Thu Mar 15 00:08:11 IST 2018]; root of context hierarchy
2018-03-15 00:08:18.729  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[GET]}" onto public java.lang.String com.cmad.essentials.blogger.client.ClientController.index()
2018-03-15 00:08:18.733  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/like/{blogId}],methods=[POST]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.Likes> com.cmad.essentials.blogger.rest.BlogResource.add(java.lang.Long,com.cmad.essentials.blogger.api.Likes)
2018-03-15 00:08:18.733  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/comment/{blogId}],methods=[POST]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.Comment> com.cmad.essentials.blogger.rest.BlogResource.add(java.lang.Long,com.cmad.essentials.blogger.api.Comment)
2018-03-15 00:08:18.734  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/add],methods=[POST]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.Blog> com.cmad.essentials.blogger.rest.BlogResource.add(com.cmad.essentials.blogger.api.Blog)
2018-03-15 00:08:18.734  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/get/{blogId}],methods=[GET]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.Blog> com.cmad.essentials.blogger.rest.BlogResource.get(java.lang.Long)
2018-03-15 00:08:18.734  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/update],methods=[PUT]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.Blog> com.cmad.essentials.blogger.rest.BlogResource.update(com.cmad.essentials.blogger.api.Blog)
2018-03-15 00:08:18.734  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/find],methods=[GET]}" onto public org.springframework.http.ResponseEntity<java.util.Collection<com.cmad.essentials.blogger.api.Blog>> com.cmad.essentials.blogger.rest.BlogResource.find(java.lang.String,java.lang.String)
2018-03-15 00:08:18.735  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/list],methods=[GET]}" onto public org.springframework.http.ResponseEntity<java.util.Collection<com.cmad.essentials.blogger.api.Blog>> com.cmad.essentials.blogger.rest.BlogResource.list()
2018-03-15 00:08:18.735  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/blog/edit/{blogId}],methods=[GET]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.Blog> com.cmad.essentials.blogger.rest.BlogResource.edit(java.lang.Long)
2018-03-15 00:08:18.737  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/user/register],methods=[POST]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.User> com.cmad.essentials.blogger.rest.UserResource.register(com.cmad.essentials.blogger.api.User)
2018-03-15 00:08:18.737  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/user/update/{userId}],methods=[PUT]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.User> com.cmad.essentials.blogger.rest.UserResource.update(java.lang.String,com.cmad.essentials.blogger.api.User)
2018-03-15 00:08:18.737  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/user],methods=[GET]}" onto public org.springframework.http.ResponseEntity<java.util.Collection<com.cmad.essentials.blogger.api.Blog>> com.cmad.essentials.blogger.rest.UserResource.blogs(java.lang.String)
2018-03-15 00:08:18.737  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/user/login],methods=[POST]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.User> com.cmad.essentials.blogger.rest.UserResource.login(javax.ws.rs.core.HttpHeaders)
2018-03-15 00:08:18.738  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/rest/user],methods=[DELETE]}" onto public org.springframework.http.ResponseEntity<com.cmad.essentials.blogger.api.User> com.cmad.essentials.blogger.rest.UserResource.logout(java.lang.String)
2018-03-15 00:08:18.740  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2018-03-15 00:08:18.740  INFO 48832 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-03-15 00:08:18.858  INFO 48832 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-03-15 00:08:18.859  INFO 48832 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-03-15 00:08:18.956  INFO 48832 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-03-15 00:08:19.010  INFO 48832 --- [           main] oConfiguration$WelcomePageHandlerMapping : Adding welcome page: class path resource [public/index.html]
2018-03-15 00:08:19.507  INFO 48832 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2018-03-15 00:08:19.568  INFO 48832 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8082 (http)
2018-03-15 00:08:19.573  INFO 48832 --- [           main] c.c.e.blogger.BloggerApplication         : Started BloggerApplication in 8.138 seconds (JVM running for 8.681)
2018-03-15 00:08:37.172  INFO 48832 --- [nio-8082-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'
2018-03-15 00:08:37.172  INFO 48832 --- [nio-8082-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started
2018-03-15 00:08:37.195  INFO 48832 --- [nio-8082-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 23 ms
2018-03-15 00:08:37.743  INFO 48832 --- [nio-8082-exec-3] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:01.593 ERROR 48832 --- [nio-8082-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:02.719 ERROR 48832 --- [nio-8082-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:16.236 ERROR 48832 --- [nio-8082-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:17.701 ERROR 48832 --- [nio-8082-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:19.468 ERROR 48832 --- [nio-8082-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:20.272 ERROR 48832 --- [nio-8082-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:20.941 ERROR 48832 --- [nio-8082-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:21.689 ERROR 48832 --- [io-8082-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:31.180 ERROR 48832 --- [nio-8082-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:31.381 ERROR 48832 --- [nio-8082-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:31.575 ERROR 48832 --- [nio-8082-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:31.747 ERROR 48832 --- [nio-8082-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:32.378 ERROR 48832 --- [nio-8082-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:32.551 ERROR 48832 --- [nio-8082-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:33.086 ERROR 48832 --- [nio-8082-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:18:33.377 ERROR 48832 --- [nio-8082-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:26:56.877 ERROR 48832 --- [nio-8082-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.GeneratedMethodAccessor84.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]

Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select likes0_.blog_id as blog_id3_5_0_, likes0_.id as id1_5_0_, likes0_.id as id1_5_1_, likes0_.blog_id as blog_id3_5_1_, likes0_.userId as userId2_5_1_ from Likes likes0_ where likes0_.blog_id=?
Hibernate: select followers0_.BlogCategory_id as BlogCate1_3_0_, followers0_.followers_userId as follower2_3_0_, user1_.userId as userId1_6_1_, user1_.address_id as address10_6_1_, user1_.alternateEmailId as alternat2_6_1_, user1_.company as company3_6_1_, user1_.emailId as emailId4_6_1_, user1_.firstName as firstNam5_6_1_, user1_.lastName as lastName6_6_1_, user1_.password as password7_6_1_, user1_.phoneNumber as phoneNum8_6_1_, user1_.userType as userType9_6_1_, address2_.id as id1_0_2_, address2_.city as city2_0_2_, address2_.country as country3_0_2_, address2_.state as state4_0_2_, address2_.streetAddress as streetAd5_0_2_, address2_.zipCode as zipCode6_0_2_ from BlogCategory_User followers0_ inner join User user1_ on followers0_.followers_userId=user1_.userId left outer join Address address2_ on user1_.address_id=address2_.id where followers0_.BlogCategory_id=?
Hibernate: select blog0_.id as id1_1_, blog0_.author_userId as author_u6_1_, blog0_.blogCategory_id as blogCate7_1_, blog0_.blogContent as blogCont2_1_, blog0_.createdDate as createdD3_1_, blog0_.modifiedDate as modified4_1_, blog0_.title as title5_1_ from Blog blog0_
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select user0_.userId as userId1_6_0_, user0_.address_id as address10_6_0_, user0_.alternateEmailId as alternat2_6_0_, user0_.company as company3_6_0_, user0_.emailId as emailId4_6_0_, user0_.firstName as firstNam5_6_0_, user0_.lastName as lastName6_6_0_, user0_.password as password7_6_0_, user0_.phoneNumber as phoneNum8_6_0_, user0_.userType as userType9_6_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.state as state4_0_1_, address1_.streetAddress as streetAd5_0_1_, address1_.zipCode as zipCode6_0_1_ from User user0_ left outer join Address address1_ on user0_.address_id=address1_.id where user0_.userId=?
Hibernate: select blogcatego0_.id as id1_2_0_, blogcatego0_.blogCategoryType as blogCate2_2_0_ from BlogCategory blogcatego0_ where blogcatego0_.id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
Hibernate: select comments0_.blog_id as blog_id5_4_0_, comments0_.id as id1_4_0_, comments0_.id as id1_4_1_, comments0_.blog_id as blog_id5_4_1_, comments0_.commentContent as commentC2_4_1_, comments0_.commentedBy as commente3_4_1_, comments0_.postedDate as postedDa4_4_1_ from Comment comments0_ where comments0_.blog_id=?
2018-03-15 01:27:23.355 ERROR 48832 --- [nio-8082-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.cmad.essentials.blogger.service.BlogServiceImpl.searchBlogs(BlogServiceImpl.java:40) ~[classes/:na]
	at com.cmad.essentials.blogger.rest.BlogResource.find(BlogResource.java:61) ~[classes/:na]
	at sun.reflect.GeneratedMethodAccessor84.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]


"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _megadraft = require("megadraft");

var _megadraft2 = _interopRequireDefault(_megadraft);

var _utils = require("megadraft/lib/utils");

var _plugin = require("../src/plugin");

var _plugin2 = _interopRequireDefault(_plugin);

var _content = require("./content");

var _content2 = _interopRequireDefault(_content);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017, metal <metal@alucinados.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * License: MIT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Demo = function (_React$Component) {
  _inherits(Demo, _React$Component);

  function Demo(props) {
    _classCallCheck(this, Demo);

    var _this = _possibleConstructorReturn(this, (Demo.__proto__ || Object.getPrototypeOf(Demo)).call(this, props));

    _this.state = {
      content: (0, _utils.editorStateFromRaw)(_content2.default)
    };
    _this.onChange = _this.onChange.bind(_this);
    return _this;
  }

  _createClass(Demo, [{
    key: "onChange",
    value: function onChange(content) {
      this.setState({ content: content });
    }
  }, {
    key: "render",
    value: function render() {
      var pluginName = "teste do metal";
      return _react2.default.createElement(
        "div",
        { className: "content" },
        _react2.default.createElement(
          "header",
          null,
          _react2.default.createElement(
            "h1",
            null,
            pluginName,
            " - Megadraft Plugin"
          )
        ),
        _react2.default.createElement(
          "div",
          { className: "editor" },
          _react2.default.createElement(_megadraft2.default, { plugins: [_plugin2.default], editorState: this.state.content, onChange: this.onChange })
        )
      );
    }
  }]);

  return Demo;
}(_react2.default.Component);

_reactDom2.default.render(_react2.default.createElement(Demo, null), document.getElementById("container"));
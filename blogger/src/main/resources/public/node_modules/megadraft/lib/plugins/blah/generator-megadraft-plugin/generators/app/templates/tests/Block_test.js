"use strict";

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactAddonsTestUtils = require("react-addons-test-utils");

var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);

var _chai = require("chai");

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _Block = require("../src/Block");

var _Block2 = _interopRequireDefault(_Block);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var expect = _chai2.default.expect; /*
                                     * Copyright (c) <%= info.year %>, <%- info.copyrightHolder %>
                                     *
                                     * License: MIT
                                     */

describe("Block", function () {
  beforeEach(function () {
    this.data = {
      caption: "media caption"
    };

    this.setReadOnly = _sinon2.default.spy();
    this.updateEntity = _sinon2.default.spy();
    this.remove = _sinon2.default.spy();
    this.plugin = _sinon2.default.spy();

    this.wrapper = _reactAddonsTestUtils2.default.renderIntoDocument(_react2.default.createElement(_Block2.default, { container: this, blockProps: this, data: this.data }));

    this.caption = _reactAddonsTestUtils2.default.scryRenderedDOMComponentsWithTag(this.wrapper, "input")[0];
  });

  it("renders caption from data", function () {
    expect(this.caption.value).to.be.equal(this.data.caption);
  });

  it("updates entity on caption change", function () {
    this.caption.value = "new caption";
    _reactAddonsTestUtils2.default.Simulate.change(this.caption);
    expect(this.updateEntity.calledWith({ caption: "new caption" })).to.be.true;
  });

  it("your tests here...", function () {
    expect(true).to.be.false;
  });
});